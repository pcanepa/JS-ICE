// functions for JS-ICE
//A. Salij 12.7.18 (salij1@stolaf.edu) 

//converts the point data type in jmol into arrays of the 3 coordinates, indexed x,y,z 
function pointToArray(pointt){
	var pointt = ""+pointt+"" 
	var coordinateArray = []
	var totalChars = pointt.length
	for (var i = 0; i < totalChars;i++){
		if (pointt[i] == "{"){
			pointt[i] = " "
		}
		if (pointt[i] == "}"){
			pointt[i] = " "
		}
	}
	var elementString  = ""
	for (var i = 0; i <= totalChars;i++){
		if (pointt[i] == " " || pointt[i] == "\t"){
			if (elementString != " " && elementString != ""){
				coordinateArray.push(elementString)
			}
			elementString = ""
			
		}
		else{
			elementString += pointt[i]
		}
	}
	return coordinateArray
}

// gets and returns the symmetry operation vector (as in "x,y,z" for identity are so forth) names 
function readSymmetryVectors() {
	var symopVectorArray = [];
	if (_M.fileSymmetryOperations)
		{symopVectorArray = _M.fileSymmetryOperations 
	}
	else {
		var symopCharArray = _M.getProperty("spacegroupInfo.symmetryInfo")
		var totalChars = symopCharArray.length
		var allElementsArray = []
		var elementCounter = 1
		for (var i = 1; i <= totalChars;i++){
			if (symopCharArray[i] == "\t" || symopCharArray[i] == " "){
				allElementsArray[elementCounter] = elementString
				var elementString = ""
				elementCounter += 1 
			}
			if (symopCharArray[i] != "\t" && symopCharArray[i] != " "){
				elementString += symopCharArray[i]
			}
		}
		var vectorCounter = 1
		var totalElements = allElementsArray.length
		for (var i = 1; i <= elementCounter; i++) {
			var elementString = ""+allElementsArray[i]
			var strLength  = elementString.length
			for (var j = 1; j<= strLength; j++) {
				if  (elementString[j] == ","){
					symopVectorArray[vectorCounter] = allElementsArray[i];
					vectorCounter += 1 
					break
				}
			}
		}
	}

	return symopVectorArray
}
 

// returns the points given after performing a symmetry operation a chosen number of times (one point per operation)
function getSymmetricAtomArray(symopSelected,pointt,iterations){
	var symAtomArray = [];
	for (var i = 1; i<= iterations;i++) {
		if (i=1){
			var output = all.symop(symopSelected,pointt)
			symAtomArray[i] = output; 
			}
		if (i>= 2) {
			var output = all.symop(symopSelected,symAtomArray[i-1])
			symAtomArray[i] = output;
		}	

	}
	return symAtomArray 
}

//draws narrow arrows as opposed to the thicker, shorter arrows provided by the default draw symop command 
function drawCleanSymmetryAxisVectors(axisFactor){
	//draw sym_axis* off 
	//draw symop @symOperation
	point1 = $sym_rotvector1[0]
	point2 = $sym_rotvector1[1]
	point3 = $sym_rotvector2[0]
	point4 = $sym_rotvector2[1]
	point2 = (point2-point1)*axisFactor
	point4 = (point4-point3)*axisFactor
	draw sym_rotvector* off 
	draw ID "sym_axis1" vector @point1 @point2
	draw ID "sym_axis2" vector @point3 @point4 
} 

//adds new atom to model
function appendNewAtom(elementName, point) {
	model last;
	assign atom @elementName @point //appends new atom, connected to a base atom in original structure 

} 

//provides all the output of all available symops of the current model upon a given point 
function getSymmetryAtomArrayAllSymops(point){
	getProperty spacegroupInfo.symmetryInfo
	symopArray = readSymmetryVectors()
	symAtomArrayAllSymops = []
	numberSymops = symopArray.length
	for (var i = 1;i <= numberSymops; i++){
		currentSymop = symopArray[i]
		symmetryAppliedPoint = all.symop(currentSymop,point)
		symAtomArrayAllSymops[i] = symmetryAppliedPoint
	}
	return symAtomArrayAllSymops
}

//IDEA: constraint menu
//UNTESTED
//Many of the below functions are outlines for future functions 
//provides the closest point on a line designated by some axis draw object to some selected point if said point is within some distance 
function bindToVectorConstraint(vectorDrawObjectID,selectedPoint,errorDistance){
	var vectorPointer = ""+vectorDrawObjectID+"" //IMPORTANT: this is how to designate pointers in jmol
	var errorDistance = 1
	var startPoint = $ @vectorPointer[0]
	var endPoint = $ @vectorPointer[1]
	startPoint = $sym_rotvector1[0]// for demonstration bc pointers aren't working
	endPoint = $sym_rotvector1[1]//
	var constrainedPoint = intersection(startPoint,endPoint-startPoint,selectedPoint) //second input into intersection is a vector from first point
	var selectedPointToNewPointDistance = selectedPoint.distance(constrainedPoint)
	if (selectedPointToNewPointDistance > errorDistance){
		return selectedPoint 
	}
	else{
		return constrainedPoint 
	}
}

//provides the closest point on a plane designated by some draw object to some selected point if
//said point is within some distance 
function bindToPlaneConstraint(planeDrawObjectID, selectedPoint, errorDistance){
	var planePointer = ""+planeDrawObjectID+""
	var constrainedPoint = intersection(selectedPoint,planePointer)
	var selectedPointToNewPointDistance = @selectedPoint.distance(constrainedPoint)
	if (selectedPointToNewPointDistance > errorDistance){
		return selectedPoint 
	}
	else{
		return constrainedPoint 
	}
}

function bindToSphereConstraint(sphereCenterPoint,sphereRadius,selectedPoint,errorDistance){
	//details need filling--talk to Dr. Hanson about documentation on circle intersection
	//var constrainedPoint = intersection() NEEDS FILLING 
	var contrainedPoint = {0 0 0} //PLACEHOLDER
	var selectedPointToNewPointDistance = @selectedPoint.distance(constrainedPoint)
	if (selectedPointToNewPointDistance > errorDistance){
		return selectedPoint 
	}
	else{
		return constrainedPoint 
	}
}

//needs testing 
function drawVector(vectorID,vectorStart,vectorEnd){
	vectorIDString = ""+vectorID+""
	vectorStartString = ""+vectorStart+""
	vectorEndString = ""+vectorEnd+""
	draw @vectorIDString @vectorstartString @vectorEndString
}


//Unused
// gets and returns the symmetry operation names (e.g. "identity") 
//not really necessary for current functionality but nice to have 
//only functional in jsmol as jsice cannot read spacegroupInfo.operations
function readSymmetryNames() {
	var allSymopInfo = _M.getProperty("spacegroupInfo.operations");
	var numSymops = allSymopInfo.length;
	var symopNameArray = [];
	for (var i = 1; i<= numSymops;i++){
		var symopCurrent = allSymopInfo[i];
		var currentName = symopCurrent[3];
		symopNameArray[i] = currentName;
	}
	return symopNameArray
}

